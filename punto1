.data
array: .word 1, 7, 2, 3, 4, 5, 9, 8, 16, -50
length: .word 10
mayor: .word 0
space: .asciiz ", "
multiplosCuatro: .word 0


.text

main:
    # Cargo array
    la $s1, array
    # Cargo length
    lw $s2, length
    # Cargo mayor
    li $t0, 0
    # Contador de posiciones
    li $s0, 0
    #Mayor valor absoluto
    li $t7, 0
    #Variable bandera, 0 para 
    #li $t6,0

while:
    bge $s0, $s2, exit     # Si s0 >= s2, termina el bucle
    # Calcular la direcciï¿½n del elemento en el array
    mul $t6, $s0, 4        # Multiplicar el ï¿½ndice por 4 (tamaï¿½o de palabra)
    add $t6, $t6, $s1      # Sumar la direcciï¿½n base del array
    lw $t3, 0($t6)         # Cargar el valor del elemento en $t3
    jal printNumber


    #Todas las operaciones acá
    
    
    #Mayor de todo el array
    jal mayorQue    
    
    
    #Multiplos de 4
    li $t4,4
    div $t3,$t4
    mfhi $t5
    jal validarMultiplo
    

    #Mayor valor absoluto
    abs $t3,$t3
    jal mayorAbsoluto     
    
    
    addi $s0, $s0, 1          # Incrementar el contador de posiciï¿½n
    j while                    # Volver al inicio del bucle


exit:
    li $v0, 10             # Finalizar el programa
    syscall

mayorQue:
    bgt $t3, $t0, setMayor
    jr $ra                # Volver al llamado del while


setMayor:
    move $t0, $t3          # Almacenar el elemento actual como el nuevo mayor
    jr $ra                # Volver al llamado del while


mayorAbsoluto:
    bgt $t3, $t7, setMayorAbsoluto
    jr $ra                # Volver al llamado del while

setMayorAbsoluto:
    move $t2, $t3          # Almacenar el elemento actual como el nuevo mayor
    jr $ra  		   # Volver al llamado del while

printNumber:
    li $v0, 1              # Imprimir un entero
    move $a0, $t3          # Cargar el nï¿½mero a imprimir en $a0
    syscall

    li $v0, 4              # Imprimir una cadena
    la $a0, space          # Cargar la cadena a imprimir en $a0
    syscall

    jr $ra                 # Volver a la llamada

validarMultiplo:
	beqz $t5, aumentarContadorMultiplo
	jr $ra           # Volver al llamado del while
	
aumentarContadorMultiplo:
 	addi $sp,$sp, -4		#Guardar numero actual del array (t3)
    	sw $t3, 0($sp)                  #Guardar en pila t3	
	la $t3, multiplosCuatro
	lw $t4, 0($t3)
	addi $t4,$t4,1
	sw $t4,0($t3)
	move $t1,$t4
	
	#Setear nuevamente el inicio de a1 que guardamos en la pila (t3)
   	lw $t3, 0($sp)
    	addi $sp,$sp, 4
	jr $ra                # Volver al llamado del while
	



